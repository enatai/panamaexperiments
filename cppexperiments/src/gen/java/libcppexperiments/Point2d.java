// Generated by jextract

package libcppexperiments;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 *  * int x;
 * int y;
 * void Point2d(struct Point2d* this$, int x, int y);
 * int getX(struct Point2d* this$);
 * int getY(struct Point2d* this$);
 * int distance(struct Point2d* this$);
 * }
 */
public class Point2d {

    public static MemoryLayout $LAYOUT() {
        return constants$0.const$3;
    }
    public static VarHandle x$VH() {
        return constants$0.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int x;
     * }
     */
    public static int x$get(MemorySegment seg) {
        return (int)constants$0.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int x;
     * }
     */
    public static void x$set(MemorySegment seg, int x) {
        constants$0.const$4.set(seg, x);
    }
    public static int x$get(MemorySegment seg, long index) {
        return (int)constants$0.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void x$set(MemorySegment seg, long index, int x) {
        constants$0.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle y$VH() {
        return constants$0.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int y;
     * }
     */
    public static int y$get(MemorySegment seg) {
        return (int)constants$0.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int y;
     * }
     */
    public static void y$set(MemorySegment seg, int x) {
        constants$0.const$5.set(seg, x);
    }
    public static int y$get(MemorySegment seg, long index) {
        return (int)constants$0.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void y$set(MemorySegment seg, long index, int x) {
        constants$0.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static MethodHandle Point2d$MH() {
        return RuntimeHelper.requireNonNull(constants$1.const$1,"_ZN5happy7Point2dC1Eii");
    }
/**
 * {@snippet :
 * void Point2d(struct Point2d* this$, int x, int y);
 * }
 */
    public static void Point2d(MemorySegment this$, int x, int y) {
        var mh$ = Point2d$MH();
        try {
            mh$.invokeExact(this$, x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getX$MH() {
        return RuntimeHelper.requireNonNull(constants$1.const$2,"_ZN5happy7Point2d4getXEv");
    }
/**
 * {@snippet :
 * int getX(struct Point2d* this$);
 * }
 */
    public static int getX(MemorySegment this$) {
        var mh$ = getX$MH();
        try {
            return (int)mh$.invokeExact(this$);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getY$MH() {
        return RuntimeHelper.requireNonNull(constants$1.const$3,"_ZN5happy7Point2d4getYEv");
    }
/**
 * {@snippet :
 * int getY(struct Point2d* this$);
 * }
 */
    public static int getY(MemorySegment this$) {
        var mh$ = getY$MH();
        try {
            return (int)mh$.invokeExact(this$);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle distance$MH() {
        return RuntimeHelper.requireNonNull(constants$1.const$4,"_ZN5happy7Point2d8distanceEv");
    }
/**
 * {@snippet :
 * int distance(struct Point2d* this$);
 * }
 */
    public static int distance(MemorySegment this$) {
        var mh$ = distance$MH();
        try {
            return (int)mh$.invokeExact(this$);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


