// Generated by jextract

package libcexperiments;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class Libcexperiments  {

    public static final OfByte C_CHAR = JAVA_BYTE;
    public static final OfShort C_SHORT = JAVA_SHORT;
    public static final OfInt C_INT = JAVA_INT;
    public static final OfLong C_LONG = JAVA_LONG;
    public static final OfLong C_LONG_LONG = JAVA_LONG;
    public static final OfFloat C_FLOAT = JAVA_FLOAT;
    public static final OfDouble C_DOUBLE = JAVA_DOUBLE;
    public static final AddressLayout C_POINTER = RuntimeHelper.POINTER;
    public static MethodHandle returnStruct$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$6,"returnStruct");
    }
    /**
     * {@snippet :
     * struct B returnStruct(,...);
     * }
     */
    public static MemorySegment returnStruct(SegmentAllocator allocator, Object... x1) {
        var mh$ = returnStruct$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
}


